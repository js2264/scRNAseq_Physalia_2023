# Lab 8 - Single-cell ATAC-seq analysis workflow

```{r include=FALSE, echo = FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
```

ATAC-seq data may be obtained in isolation using a single-cell ATAC-seq protocol (e.g. [10X scATACseq](https://support.10xgenomics.com/single-cell-atac)) or in combination with gene expression data using a single-cell multiome protocole (e.g. [10X multiome](https://www.10xgenomics.com/products/single-cell-multiome-atac-plus-gene-expression) and [SHARE-seq](https://pubmed.ncbi.nlm.nih.gov/33098772/)). 

Several packages are currently avaialble to process scATAC-seq data in R. These include `[Signac](https://satijalab.org/signac/index.html)` and `[ArchR](https://www.archrproject.com/bookdown/index.html#section)`. This lab will closely follow the [processing steps](https://satijalab.org/signac/articles/pbmc_vignette.html) outlined in `Signac`, which interfaces well with `Seurat` for single-cell analysis. 

In this lab, we will process a PBMC single-cell ATAC-seq (scATAC-seq) dataset and perform preliminary analysis to assess quality of these data. The data for this lab comes from [10X Genomics](https://www.10xgenomics.com/resources/datasets/10-k-peripheral-blood-mononuclear-cells-pbm-cs-from-a-healthy-donor-1-standard-1-0-1). 
The dataset contains roughly ~ 10,000 cells.

::: {.callout-tip icon='true'}
## Overarching goals

1. Import cells from human PBMC scATACseq dataset
2. Perform scATACseq quality controls and checks 
3. Filter, normalize and plot PBMC scATACseq dataset
4. Run chromVAR to identify TF activity in each cell cluster  
5. Compute gene activity scores and check known markers  
:::

## Process human PBMC dataset

### Download data 

- **Download the files related to scATACseq of all human PBMC cells.**

Data comes from [10X Genomics](https://www.10xgenomics.com/resources/datasets/10-k-peripheral-blood-mononuclear-cells-pbm-cs-from-a-healthy-donor-1-standard-1-0-1). 

Direct download links are provided below

```{r, filename = "R"}
dir.create('scATAC')
download.file("https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_filtered_peak_bc_matrix.h5", "scATAC/atac_v1_pbmc_10k_filtered_peak_bc_matrix.h5")
download.file("https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_peaks.bed", "scATAC/atac_v1_pbmc_10k_peaks.bed")
download.file("https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_singlecell.csv", "scATAC/atac_v1_pbmc_10k_singlecell.csv")
download.file("https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_fragments.tsv.gz", "scATAC/atac_v1_pbmc_10k_fragments.tsv.gz")
download.file("https://cf.10xgenomics.com/samples/cell-atac/1.0.1/atac_v1_pbmc_10k/atac_v1_pbmc_10k_fragments.tsv.gz.tbi", "scATAC/atac_v1_pbmc_10k_fragments.tsv.gz.tbi")
```

### Import data 

Notice how the count matrix is in a `.h5` format. We have already encountered 
this format in [Lab3](../day2/Lab3_Rbioc.qmd). Back then, we imported 
it with `DropletUtils::read10xCounts`. 

- **Does this function work here?**

```{r, filename = "R"}
DropletUtils::read10xCounts("scATAC/atac_v1_pbmc_10k_filtered_peak_bc_matrix.h5")
```

This works because 10X Genomics make sure to distribute files in `.h5` format 
that are consistent accross single-cell sequencing mthodologies. 
However, the `SingleCellExperiment` obtained with this approach is not 
the most convenient, as it cannot natively leverage `fragments` file (see below). 

Instead, we can create a `Signac` object, a flavour of `Seurat` objects. 

- **Import counts matrix and feature annotations using an import function provided by `Seurat`.**

```{r, filename = "R"}
library(Seurat)
library(Signac)
library(rtracklayer)
library(stringr)
cnts <- Read10X_h5('scATAC/atac_v1_pbmc_10k_filtered_peak_bc_matrix.h5')
features <- import('scATAC/atac_v1_pbmc_10k_peaks.bed')
features$peak <- as.character(features) |> str_replace(':', '-')
metadata <- read.csv(
  file = "scATAC/atac_v1_pbmc_10k_singlecell.csv",
  header = TRUE,
  row.names = 1
)
```

- **How many accessible genomic segments were found in this dataset?**

```{r, filename = "R"}
features
length(features)
```

### Create a `Seurat` object 

The next step is to aggregate `counts` and `features` into a `ChromatinAssay`, 
a scATAC-seq flavour of `Seurat` standard `Assays`.
The documentation for `?CreateChromatinAssay` indicates that the user can provide: 

1. A `fragments` file, corresponding to the full list of all unique fragments mapped across all single cells. 
2. Genomic annotations to the `ChromatinAssay`, corresponding to gene annotations, 
promoter positions, etc. Such annotations can be generated from Ensembl. 

- **Generate human annotations from Ensembl using a parsing function from `Seurat`.**

```{r, filename = "R"}
## - Get human gene annotations (hg19/GRCh37) to feed it into the future `ChromatinAssay`
BiocManager::install('EnsDb.Hsapiens.v75')
annotations <- GetGRangesFromEnsDb(ensdb = EnsDb.Hsapiens.v75::EnsDb.Hsapiens.v75)
seqlevelsStyle(annotations) <- 'UCSC'
```

- **Create a `ChromatinAssay` using `counts`, `features`, `fragments` and `annotations`.**

```{r, filename = "R"}
## - Create Chromatin Assay
assay <- Signac::CreateChromatinAssay(
    counts = cnts,
    ranges = features,
    fragments = "scATAC/atac_v1_pbmc_10k_fragments.tsv.gz",
    annotation = annotations,
    genome = "hg19",
    min.cells = 10, 
    min.features = 10
)
assay
```

- **What are the dimensions of this object? Are they comparable to the count matrix? Comment.**

```{r, filename = "R"}
dim(cnts)
dim(assay)
```

It's finally time to wrap the `ChromatinAssay` into a `Seurat` standard object. 
This is done using the `CreateSeuratObject`, as already covered in [Lab6](../day3/Lab6_batch_correction.qmd)

- **Create a `PBMC` `Seurat` object.**

```{r, filename = "R"}
## - Create Seurat object
PBMC <- Seurat::CreateSeuratObject(
    counts = assay,
    assay = 'ATAC', 
    meta.data = metadata[metadata$is__cell_barcode == 1, ]
)
PBMC

PBMC[['ATAC']]
granges(PBMC)
Annotation(PBMC)
```

### Check QCs 

#### Cell-based QCs 

The fraction of reads in peaks (FRiP) is a good indicator of how well each 
cell was handled during scATACseq processing. 

```{r, filename = "R"}
PBMC@meta.data$FRiP <- PBMC$peak_region_fragments / PBMC$passed_filters
PBMC@meta.data$nCount_ATAC <- colSums(GetAssayData(PBMC, slot = "counts"))
PBMC@meta.data$nFeature_ATAC <- colSums(GetAssayData(PBMC, slot = "counts") > 0)

quantile(PBMC$FRiP, seq(0, 1, 0.1))
quantile(PBMC$nCount_ATAC, seq(0, 1, 0.1))
quantile(PBMC$nFeature_ATAC, seq(0, 1, 0.1))
```

#### Peaks-based QCs 

- **Which analysis are the `fragments` required for, exactly?**
- **Could we still perform normalization/clustering/annotation without them? And motif enrichment analysis?**

Since we do have the `fragments` file at hand, most of the QC steps are 
available (e.g. `TSSEnrichment`, `NucleosomeSignal` or fragment size distribution). 
Let's go through them one by one. 

```{r, filename = "R"}
# compute nucleosome signal score per cell
PBMC <- NucleosomeSignal(object = PBMC)

# compute TSS enrichment score per cell
PBMC <- Signac::TSSEnrichment(object = PBMC, fast = FALSE)
```

The `TSSPlot` function from `Signac` can be used to plot the fragment count per peak ~ TSS enrichment. 

```{r, filename = "R"}
PBMC$high.tss <- ifelse(PBMC$TSS.enrichment > 3.5, 'High', 'Low')
TSSPlot(PBMC, group.by = 'high.tss') + NoLegend()
PBMC$high.tss <- ifelse(PBMC$TSS.enrichment > 2.5, 'High', 'Low')
TSSPlot(PBMC, group.by = 'high.tss') + NoLegend()
```

The `FragmentHistogram` function from `Signac` can be used to plot the fragment size distribution in peaks with different nucleosome signals. 

```{r, filename = "R"}
PBMC$nucleosome_group <- ifelse(PBMC$nucleosome_signal > 4, 'NS > 4', 'NS < 4')
FragmentHistogram(object = PBMC, group.by = 'nucleosome_group')
```

The new `DensityScatter` function from `Signac` can be used to plot the fragment count per peak ~ TSS enrichment, combining both metrics into a single plot. 

```{r, filename = "R"}
p <- DensityScatter(PBMC, x = 'TSS.enrichment', y = 'nucleosome_signal', log_x = FALSE, quantiles = TRUE)
```

### Filter cells and features 

We do have other pre-computed metrics (e.g. `FRIP` and `depth`). 

- **Check these metrics and filter the `Seurat` object (cells and features) as deemed appropriate.**

```{r, filename = "R"}
## - Filter data 
PBMC <- subset(PBMC, subset = nCount_ATAC > 3000 & nCount_ATAC < 100000) 
PBMC <- subset(PBMC, subset = nFeature_ATAC > 1000 & nFeature_ATAC < 20000) 
PBMC <- subset(PBMC, subset = FRIP > 0.30) 
## - Remove peaks with low coverage
PBMC <- PBMC[rowSums(GetAssayData(PBMC, slot = "counts")) > 10, ]
PBMC <- PBMC[rowSums(GetAssayData(PBMC, slot = "counts") > 0) > 10, ]
```

### Dimensionality reduction and clustering

- **Now that the dataset is filtered, normalize (by using TF-IDF approach) then further reduce the dimensionality for visualization purposes.**

```{r, filename = "R"}
## - Normalize data 
PBMC <- RunTFIDF(PBMC) 

## - Reduce dimensionality
PBMC <- FindTopFeatures(PBMC, min.cutoff = 'q50') 
PBMC <- RunSVD(PBMC) 

## - Label clusters according to the original publication
PBMC <- RunUMAP(object = PBMC, reduction = 'lsi', dims = 2:30)
PBMC <- FindNeighbors(object = PBMC, reduction = 'lsi', dims = 2:30)
PBMC <- FindClusters(object = PBMC, verbose = FALSE, algorithm = 3)

## - Visualize data 
p <- DimPlot(PBMC, label = TRUE) + NoLegend()
```

- **What can you observe in the `UMAP` projection of the dataset? Comment on the separation of some cell types into different spatially-resolved clusters.**

## chromVAR analysis

### Get a SummarizedExperiment of scATACseq counts over peaks

`chromVAR` works with raw counts stored as a `RangedSummarizedExperiment`. By now, you should be able to 
easily extract the raw counts from a specific `Seurat` assay. Store it in a `RangedSummarizedExperiment` 
(~ equivalent to `Seurat` assay but in `Bioconductor`). 

- **What are the dimensions of the `RangedSummarizedExperiment` generated? What are the features and what are the columns?**

```{r, filename = "R"}
library(SummarizedExperiment)
sumExp <- SummarizedExperiment(
    assays = list('counts' = GetAssayData(PBMC, assay = 'ATAC', slot = 'counts')), 
    rowRanges = GetAssayData(PBMC, assay = 'ATAC', slot = 'ranges'), 
    colData = PBMC[[]]
)
dim(sumExp)
```

### Add GC bias to peaks 

This step is important to correct GC bias associated with each peak. 

```{r, filename = "R"}
sumExp <- chromVAR::addGCBias(sumExp, genome = BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19)
```

### Map motifs over peaks

Using `motifmatchr` package, one can map a list of motifs (e.g. from JASPAR database)
over a `RangedSummarizedExperiment` (or anything which can be coerced to a `GRanges`, actually). 

- **First, you need to import motifs from a public database in `R`. This can be done (among other ways) with the `TFBSTools` pacakge.**

```{r, filename = "R"}
## - Import motifs from JASPAR database
motifs <- TFBSTools::getMatrixSet(
    JASPAR2020::JASPAR2020,
    list(species = 9606, all_versions = FALSE)
)
names(motifs) <- TFBSTools::name(motifs)
```

- **Now map the subset of motifs of interest to the filtered peaks, using `motifmatchr::matchMotifs()`.**

- **Read `matchMotifs()` documentation and run it on your `sumExp`.**
- **What is the class of the generated object? Its dimensions?**
- **What are the features and what are the columns?**

```{r, filename = "R"}
library(BiocParallel)
register(MulticoreParam(workers = 16, progressbar = TRUE))
motif_mappings <- motifmatchr::matchMotifs(motifs, sumExp, genome = BSgenome.Hsapiens.UCSC.hg19::BSgenome.Hsapiens.UCSC.hg19)
class(motif_mappingss)
dim(motif_mappings)
```

Because there are so many motifs and so many peaks, and in interest of time, 
we will perform `chromVAR` analysis on a subset of motifs only. You can manually filter the motifs 
list to motifs that may be relevant in our context (e.g. `EOMES`, or `GATA2`, ...). 

```{r, filename = "R"}
## - Filter to interesting motifs to keep analysis relatively quick
#       Feel free to select any TF of interest!
motif_mappings_sub <- motif_mappings[, c('EOMES', 'GATA2', 'IRF8', 'EBF1', 'SPI1', 'TCF3', 'CEBPA')]
```

### Search for motifs with high deviation of mapping compared to background 

`chromVAR`'s `computeDeviations()` function combines (1) the peak counts / cell (stored here in `sumExp`) and 
(2) the TF mapping over each peak (stored here in `motif_mappings`). 
to assess the mapping deviation for each TF over each cell compared to other cells. 

- **Run `computeDeviations()` on the set of peaks and motifs.**
- **What is the class of the generated object? Its dimensions?**
- **What are the features and what are the columns?**

```{r, filename = "R"}
## - Find background signal
bg <- chromVAR::getBackgroundPeaks(object = sumExp)
## - For each motif, compute its mapping deviation over the filtered peaks
motif_deviations <- chromVAR::computeDeviations(object = sumExp, annotations = motif_mappings_sub, background_peaks = bg)
```

### Check TF motif enrichment in different cell types 

The `motif_deviations` object can be added as a new assay to the
`PBMC` `Seurat` object. This way, one can rely on `Seurat`-based 
plotting functions to plot cells in their preferred dimensional space, and color 
them using motif deviation scores computed with `chromVAR`. 

```{r, filename = "R"}
PBMC[['MOTIF']] <- Seurat::CreateAssayObject(counts = chromVAR::deviationScores(motif_deviations))
DefaultAssay(PBMC) <- 'MOTIF'
list_p <- lapply(rownames(PBMC), function(motif) {
    FeaturePlot(PBMC, features = motif, reduction = "umap") + 
        scale_colour_gradientn(
            colors = c('#190886', '#6F07F8', '#F954A5', '#FF9D66', '#edf118'),
            limits = c(-5, 5), oob = scales::squish
        ) + 
        theme(aspect.ratio = 1)
})
list_p[[length(list_p) + 1]] <- DimPlot(PBMC, group.by = 'renamed_clusters', reduction = "umap") + theme(aspect.ratio = 1)
p <- cowplot::plot_grid(plotlist = list_p)
```

## Compute gene activity scores

Signac's `GeneActivity()` function require scATACseq fragment information. Since 
we have them, we can estimate a gene activity score for each gene in the `annotations`.

```{r, filename = "R"}
gene.activities <- GeneActivity(PBMC)
```

We can now save this new object as an `Assay` in the `PBMC` object and normalize it.

```{r, filename = "R"}
PBMC[['RNA']] <- CreateAssayObject(counts = gene.activities)

# - Normalize the new RNA assay, this time with `SCTransform`
PBMC <- SCTransform(
  object = PBMC,
  assay = 'RNA',
)

PBMC
DefaultAssay(PBMC) <- "SCT"
```

One can now perform "gene differential expression"-like analysis using the `SCT` assay!

```{r, filename = "R"}
## - Reduce dimensionality to visualize cells in 2D
PBMC <- RunPCA(PBMC) |> RunUMAP(reduction = 'pca', dims = 1:50)

## - Plot gene expression 
p <- FeaturePlot(PBMC, features = 'MS4A1', reduction = "umap") # Or NCR1 (NKp46), CD8A, CD14, MS4A1
```

Now, we can leverage this to annotate clusters according to known PBMC markers

```{r, filename = "R"}
## - Reduce dimensionality to visualize cells in 2D
PBMC <- RunPCA(PBMC) |> RunUMAP(reduction = 'pca', dims = 1:50)

## - Plot gene expression 
p <- FeaturePlot(PBMC, features = 'MS4A1', reduction = "umap") # Or NCR1 (NKp46), CD8A, CD14, MS4A1
```


## Find differentially accessible peaks 

```{r, filename = "R"}
# change back to working with peaks instead of gene activities
DefaultAssay(pbmc) <- 'peaks'

da_peaks <- FindMarkers(
  object = pbmc,
  ident.1 = "CD4 Naive",
  ident.2 = "CD14+ Monocytes",
  test.use = 'LR',
  latent.vars = 'nCount_peaks'
)



plot1 <- VlnPlot(
  object = pbmc,
  features = rownames(da_peaks)[1],
  pt.size = 0.1,
  idents = c("CD4 Naive","CD14+ Monocytes")
)
plot2 <- FeaturePlot(
  object = pbmc,
  features = rownames(da_peaks)[1],
  pt.size = 0.1
)

plot1 | plot2
```

